//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 11 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `BackgroundColor`.
    static let backgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundColor")
    /// Color `CellColor`.
    static let cellColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "CellColor")
    /// Color `ClearColor`.
    static let clearColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ClearColor")
    /// Color `FontColor`.
    static let fontColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "FontColor")
    /// Color `ThemeColor0`.
    static let themeColor0 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ThemeColor0")
    /// Color `ThemeColor1`.
    static let themeColor1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ThemeColor1")
    /// Color `ThemeColor2`.
    static let themeColor2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ThemeColor2")
    /// Color `ThemeColor3`.
    static let themeColor3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ThemeColor3")
    /// Color `ThemeColor4`.
    static let themeColor4 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ThemeColor4")
    /// Color `ThemeColor5`.
    static let themeColor5 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ThemeColor5")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "CellColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cellColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cellColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ClearColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clearColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clearColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "FontColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func fontColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.fontColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ThemeColor0", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func themeColor0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.themeColor0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ThemeColor1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func themeColor1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.themeColor1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ThemeColor2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func themeColor2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.themeColor2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ThemeColor3", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func themeColor3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.themeColor3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ThemeColor4", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func themeColor4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.themeColor4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ThemeColor5", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func themeColor5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.themeColor5, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BackgroundColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "CellColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cellColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cellColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ClearColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func clearColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.clearColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "FontColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func fontColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.fontColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ThemeColor0", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func themeColor0(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.themeColor0.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ThemeColor1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func themeColor1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.themeColor1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ThemeColor2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func themeColor2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.themeColor2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ThemeColor3", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func themeColor3(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.themeColor3.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ThemeColor4", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func themeColor4(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.themeColor4.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ThemeColor5", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func themeColor5(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.themeColor5.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 30 images.
  struct image {
    /// Image `Icon0`.
    static let icon0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon0")
    /// Image `Icon10`.
    static let icon10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon10")
    /// Image `Icon11`.
    static let icon11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon11")
    /// Image `Icon12`.
    static let icon12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon12")
    /// Image `Icon13`.
    static let icon13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon13")
    /// Image `Icon14`.
    static let icon14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon14")
    /// Image `Icon15`.
    static let icon15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon15")
    /// Image `Icon16`.
    static let icon16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon16")
    /// Image `Icon17`.
    static let icon17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon17")
    /// Image `Icon18`.
    static let icon18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon18")
    /// Image `Icon1`.
    static let icon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon1")
    /// Image `Icon2`.
    static let icon2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon2")
    /// Image `Icon3`.
    static let icon3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon3")
    /// Image `Icon4`.
    static let icon4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon4")
    /// Image `Icon5`.
    static let icon5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon5")
    /// Image `Icon6`.
    static let icon6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon6")
    /// Image `Icon7`.
    static let icon7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon7")
    /// Image `Icon8`.
    static let icon8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon8")
    /// Image `Icon9`.
    static let icon9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon9")
    /// Image `Icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon")
    /// Image `Icons`.
    static let icons = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icons")
    /// Image `Items`.
    static let items = Rswift.ImageResource(bundle: R.hostingBundle, name: "Items")
    /// Image `Logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo")
    /// Image `OrangeIcon`.
    static let orangeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "OrangeIcon")
    /// Image `Themes`.
    static let themes = Rswift.ImageResource(bundle: R.hostingBundle, name: "Themes")
    /// Image `Tutorial1`.
    static let tutorial1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tutorial1")
    /// Image `Tutorial2`.
    static let tutorial2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tutorial2")
    /// Image `Tutorial3`.
    static let tutorial3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tutorial3")
    /// Image `Tutorial4`.
    static let tutorial4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tutorial4")
    /// Image `Tutorial5`.
    static let tutorial5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tutorial5")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon0", bundle: ..., traitCollection: ...)`
    static func icon0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon1", bundle: ..., traitCollection: ...)`
    static func icon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon10", bundle: ..., traitCollection: ...)`
    static func icon10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon11", bundle: ..., traitCollection: ...)`
    static func icon11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon12", bundle: ..., traitCollection: ...)`
    static func icon12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon13", bundle: ..., traitCollection: ...)`
    static func icon13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon14", bundle: ..., traitCollection: ...)`
    static func icon14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon15", bundle: ..., traitCollection: ...)`
    static func icon15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon16", bundle: ..., traitCollection: ...)`
    static func icon16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon17", bundle: ..., traitCollection: ...)`
    static func icon17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon17, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon18", bundle: ..., traitCollection: ...)`
    static func icon18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon2", bundle: ..., traitCollection: ...)`
    static func icon2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon3", bundle: ..., traitCollection: ...)`
    static func icon3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon4", bundle: ..., traitCollection: ...)`
    static func icon4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon5", bundle: ..., traitCollection: ...)`
    static func icon5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon6", bundle: ..., traitCollection: ...)`
    static func icon6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon7", bundle: ..., traitCollection: ...)`
    static func icon7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon8", bundle: ..., traitCollection: ...)`
    static func icon8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon9", bundle: ..., traitCollection: ...)`
    static func icon9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icons", bundle: ..., traitCollection: ...)`
    static func icons(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Items", bundle: ..., traitCollection: ...)`
    static func items(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.items, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OrangeIcon", bundle: ..., traitCollection: ...)`
    static func orangeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orangeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Themes", bundle: ..., traitCollection: ...)`
    static func themes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.themes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tutorial1", bundle: ..., traitCollection: ...)`
    static func tutorial1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tutorial2", bundle: ..., traitCollection: ...)`
    static func tutorial2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tutorial3", bundle: ..., traitCollection: ...)`
    static func tutorial3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tutorial4", bundle: ..., traitCollection: ...)`
    static func tutorial4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tutorial5", bundle: ..., traitCollection: ...)`
    static func tutorial5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial5, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 128 localization keys.
    struct localizable {
      /// ja translation:      ーーーーーーーーーーーーーーーーー この上へお気軽にご記入ください。 筋トレ記録
      ///
      /// Locales: ja
      static let messageBody = Rswift.StringResource(key: "messageBody", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 1日毎
      ///
      /// Locales: ja
      static let everyday = Rswift.StringResource(key: "everyday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 27日平均
      ///
      /// Locales: ja
      static let twentySevenDaysAverage = Rswift.StringResource(key: "twentySevenDaysAverage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 3日平均
      ///
      /// Locales: ja
      static let threeDaysAverage = Rswift.StringResource(key: "threeDaysAverage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 9日平均
      ///
      /// Locales: ja
      static let nineDaysAverage = Rswift.StringResource(key: "nineDaysAverage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: AppIcon
      ///
      /// Locales: ja
      static let appIcon = Rswift.StringResource(key: "appIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Icon
      ///
      /// Locales: ja
      static let icon = Rswift.StringResource(key: "icon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Icons
      ///
      /// Locales: ja
      static let icons = Rswift.StringResource(key: "icons", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Items
      ///
      /// Locales: ja
      static let items = Rswift.StringResource(key: "items", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Logo
      ///
      /// Locales: ja
      static let logo = Rswift.StringResource(key: "logo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: OK
      ///
      /// Locales: ja
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Proにをアンロックすれば、無制限に追加することができます。
      ///
      /// Locales: ja
      static let eventsWillBeUnlimitedIfJoinPro = Rswift.StringResource(key: "eventsWillBeUnlimitedIfJoinPro", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Proをアンロック
      ///
      /// Locales: ja
      static let proViewTitle = Rswift.StringResource(key: "proViewTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Proをアンロック - 250円
      ///
      /// Locales: ja
      static let purchase = Rswift.StringResource(key: "purchase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Proを見る
      ///
      /// Locales: ja
      static let seePro = Rswift.StringResource(key: "seePro", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Proアンロック済み
      ///
      /// Locales: ja
      static let unlockedPro = Rswift.StringResource(key: "unlockedPro", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: PurchaseStatus
      ///
      /// Locales: ja
      static let purchaseStatus = Rswift.StringResource(key: "purchaseStatus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ThemeColor
      ///
      /// Locales: ja
      static let themeColor = Rswift.StringResource(key: "themeColor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Themes
      ///
      /// Locales: ja
      static let themes = Rswift.StringResource(key: "themes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Tutorial1
      ///
      /// Locales: ja
      static let tutorial1 = Rswift.StringResource(key: "tutorial1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Tutorial2
      ///
      /// Locales: ja
      static let tutorial2 = Rswift.StringResource(key: "tutorial2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Tutorial3
      ///
      /// Locales: ja
      static let tutorial3 = Rswift.StringResource(key: "tutorial3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Tutorial4
      ///
      /// Locales: ja
      static let tutorial4 = Rswift.StringResource(key: "tutorial4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Tutorial5
      ///
      /// Locales: ja
      static let tutorial5 = Rswift.StringResource(key: "tutorial5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: arrow.backward
      ///
      /// Locales: ja
      static let backIcon = Rswift.StringResource(key: "backIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: arrow.down.circle.fill
      ///
      /// Locales: ja
      static let arrowIcon = Rswift.StringResource(key: "arrowIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: date
      ///
      /// Locales: ja
      static let date = Rswift.StringResource(key: "date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ellipsis.circle
      ///
      /// Locales: ja
      static let editIcon = Rswift.StringResource(key: "editIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: email
      ///
      /// Locales: ja
      static let email = Rswift.StringResource(key: "email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: envelope
      ///
      /// Locales: ja
      static let envelopeIcon = Rswift.StringResource(key: "envelopeIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: events
      ///
      /// Locales: ja
      static let events = Rswift.StringResource(key: "events", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: example@example.com
      ///
      /// Locales: ja
      static let emailAddressPlaceholder = Rswift.StringResource(key: "emailAddressPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: gift
      ///
      /// Locales: ja
      static let giftIcon = Rswift.StringResource(key: "giftIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: hammer.circle.fill
      ///
      /// Locales: ja
      static let hammerIcon = Rswift.StringResource(key: "hammerIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: https://itunes.apple.com/jp/app/id1628829703?mt=8
      ///
      /// Locales: ja
      static let appURL = Rswift.StringResource(key: "appURL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: kg 
      ///
      /// Locales: ja
      static let kg = Rswift.StringResource(key: "kg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: latestDate
      ///
      /// Locales: ja
      static let latestDate = Rswift.StringResource(key: "latestDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: latestRep
      ///
      /// Locales: ja
      static let latestRep = Rswift.StringResource(key: "latestRep", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: latestWeight
      ///
      /// Locales: ja
      static let latestWeight = Rswift.StringResource(key: "latestWeight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: launchedTimes
      ///
      /// Locales: ja
      static let launchedTimes = Rswift.StringResource(key: "launchedTimes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: line.3.horizontal
      ///
      /// Locales: ja
      static let settingIcon = Rswift.StringResource(key: "settingIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: lock.circle.fill
      ///
      /// Locales: ja
      static let lockIcon = Rswift.StringResource(key: "lockIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: musclerecord.pro
      ///
      /// Locales: ja
      static let proIdentifier = Rswift.StringResource(key: "proIdentifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: name
      ///
      /// Locales: ja
      static let name = Rswift.StringResource(key: "name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: paintbrush.pointed.fill
      ///
      /// Locales: ja
      static let brushIcon = Rswift.StringResource(key: "brushIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: password
      ///
      /// Locales: ja
      static let passwordPlaceholder = Rswift.StringResource(key: "passwordPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: pencil.circle
      ///
      /// Locales: ja
      static let pencilIcon = Rswift.StringResource(key: "pencilIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: pencil.circle.fill
      ///
      /// Locales: ja
      static let pencilIconFill = Rswift.StringResource(key: "pencilIconFill", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: period
      ///
      /// Locales: ja
      static let period = Rswift.StringResource(key: "period", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: person
      ///
      /// Locales: ja
      static let personIcon = Rswift.StringResource(key: "personIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: plus
      ///
      /// Locales: ja
      static let plusIcon = Rswift.StringResource(key: "plusIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: pro
      ///
      /// Locales: ja
      static let pro = Rswift.StringResource(key: "pro", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: questionmark
      ///
      /// Locales: ja
      static let questionIcon = Rswift.StringResource(key: "questionIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: records
      ///
      /// Locales: ja
      static let records = Rswift.StringResource(key: "records", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: rectangle.portrait.and.arrow.right
      ///
      /// Locales: ja
      static let logoutIcon = Rswift.StringResource(key: "logoutIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: rep
      ///
      /// Locales: ja
      static let rep = Rswift.StringResource(key: "rep", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: square.and.arrow.up
      ///
      /// Locales: ja
      static let shareIcon = Rswift.StringResource(key: "shareIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: themeColorNumber
      ///
      /// Locales: ja
      static let themeColorNumber = Rswift.StringResource(key: "themeColorNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: users
      ///
      /// Locales: ja
      static let users = Rswift.StringResource(key: "users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: weight
      ///
      /// Locales: ja
      static let weight = Rswift.StringResource(key: "weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: yazujumusa@gmail.com
      ///
      /// Locales: ja
      static let messageResipients = Rswift.StringResource(key: "messageResipients", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ©︎ 2022 Musa Yazuju
      ///
      /// Locales: ja
      static let copyRight = Rswift.StringResource(key: "copyRight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ご意見・ご要望
      ///
      /// Locales: ja
      static let messageSubject = Rswift.StringResource(key: "messageSubject", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: まずは右上の ＋ ボタンから種目を追加しましょう
      ///
      /// Locales: ja
      static let tutorialTextOne = Rswift.StringResource(key: "tutorialTextOne", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: を押して記録できます
      ///
      /// Locales: ja
      static let tutorialTextTwoLast = Rswift.StringResource(key: "tutorialTextTwoLast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: アイコン
      ///
      /// Locales: ja
      static let iconViewTitle = Rswift.StringResource(key: "iconViewTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: アイコン解放
      ///
      /// Locales: ja
      static let unlockIcon = Rswift.StringResource(key: "unlockIcon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: アカウントが作成されました
      ///
      /// Locales: ja
      static let accountCreated = Rswift.StringResource(key: "accountCreated", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: アカウント作成
      ///
      /// Locales: ja
      static let createAccount = Rswift.StringResource(key: "createAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: アカウント情報を変更するには一度ログインする必要があります。
      ///
      /// Locales: ja
      static let needLoginToChangeAccount = Rswift.StringResource(key: "needLoginToChangeAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: アカウント情報変更
      ///
      /// Locales: ja
      static let changeInfoViewTitle = Rswift.StringResource(key: "changeInfoViewTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: アプリをシェア
      ///
      /// Locales: ja
      static let shareApp = Rswift.StringResource(key: "shareApp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: アプリケーション
      ///
      /// Locales: ja
      static let application = Rswift.StringResource(key: "application", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: エラーが発生しました
      ///
      /// Locales: ja
      static let errorOccured = Rswift.StringResource(key: "errorOccured", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: グラフを見る ▶︎
      ///
      /// Locales: ja
      static let seeGraph = Rswift.StringResource(key: "seeGraph", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: テーマカラー
      ///
      /// Locales: ja
      static let themeColorViewTitle = Rswift.StringResource(key: "themeColorViewTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: テーマカラー解放
      ///
      /// Locales: ja
      static let unlockTheme = Rswift.StringResource(key: "unlockTheme", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: トレーニング後は
      ///
      /// Locales: ja
      static let tutorialTextTwoFirst = Rswift.StringResource(key: "tutorialTextTwoFirst", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: パスワード
      ///
      /// Locales: ja
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: パスワードが入力されていません
      ///
      /// Locales: ja
      static let passwordIsEmpty = Rswift.StringResource(key: "passwordIsEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: パスワードが更新されました
      ///
      /// Locales: ja
      static let passwordUpdated = Rswift.StringResource(key: "passwordUpdated", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: パスワードと確認パスワードが一致しません
      ///
      /// Locales: ja
      static let passwordAndPasswordConfirmIsNotEqual = Rswift.StringResource(key: "passwordAndPasswordConfirmIsNotEqual", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: パスワードを再設定
      ///
      /// Locales: ja
      static let resetPassword = Rswift.StringResource(key: "resetPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: パスワードを変更
      ///
      /// Locales: ja
      static let changePassword = Rswift.StringResource(key: "changePassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: パスワードを忘れた
      ///
      /// Locales: ja
      static let forgotPassword = Rswift.StringResource(key: "forgotPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: メールを送信しました
      ///
      /// Locales: ja
      static let sendEmail = Rswift.StringResource(key: "sendEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: メールアドレス
      ///
      /// Locales: ja
      static let emailAddress = Rswift.StringResource(key: "emailAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: メールアドレスが入力されていません
      ///
      /// Locales: ja
      static let emailIsEmpty = Rswift.StringResource(key: "emailIsEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: メールアドレスが更新されました
      ///
      /// Locales: ja
      static let updatedEmail = Rswift.StringResource(key: "updatedEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: メールアドレスを変更
      ///
      /// Locales: ja
      static let changeEmail = Rswift.StringResource(key: "changeEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ログアウト
      ///
      /// Locales: ja
      static let logout = Rswift.StringResource(key: "logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ログイン
      ///
      /// Locales: ja
      static let login = Rswift.StringResource(key: "login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ログインに成功しました
      ///
      /// Locales: ja
      static let loginSucceeded = Rswift.StringResource(key: "loginSucceeded", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 使い方
      ///
      /// Locales: ja
      static let usage = Rswift.StringResource(key: "usage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 全てのアイテムがアンロックされました。
      ///
      /// Locales: ja
      static let unlockedAllFeatures = Rswift.StringResource(key: "unlockedAllFeatures", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 削除
      ///
      /// Locales: ja
      static let delete = Rswift.StringResource(key: "delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 受け取ったメールを開いてパスワードを再設定してください。
      ///
      /// Locales: ja
      static let pleaseCheckEmail = Rswift.StringResource(key: "pleaseCheckEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 名前を上書き
      ///
      /// Locales: ja
      static let updateName = Rswift.StringResource(key: "updateName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 回数
      ///
      /// Locales: ja
      static let repTitle = Rswift.StringResource(key: "repTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 回数：
      ///
      /// Locales: ja
      static let repIs = Rswift.StringResource(key: "repIs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 始める
      ///
      /// Locales: ja
      static let start = Rswift.StringResource(key: "start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 新しいパスワード
      ///
      /// Locales: ja
      static let newPassword = Rswift.StringResource(key: "newPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 新しいメールアドレス
      ///
      /// Locales: ja
      static let newEmailAddress = Rswift.StringResource(key: "newEmailAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 既存のアカウントにログイン
      ///
      /// Locales: ja
      static let loginExistingAccount = Rswift.StringResource(key: "loginExistingAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 本当にログアウトしますか？
      ///
      /// Locales: ja
      static let logoutConfirm = Rswift.StringResource(key: "logoutConfirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 本当に削除しますか？
      ///
      /// Locales: ja
      static let checkDelete = Rswift.StringResource(key: "checkDelete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 無料版で追加できる種目は5個です
      ///
      /// Locales: ja
      static let onlyFiveEventsAvailableInFree = Rswift.StringResource(key: "onlyFiveEventsAvailableInFree", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 確認用パスワード
      ///
      /// Locales: ja
      static let passwordConfirm = Rswift.StringResource(key: "passwordConfirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 確認用パスワードが入力されていません
      ///
      /// Locales: ja
      static let passwordConfirmIsEmpty = Rswift.StringResource(key: "passwordConfirmIsEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 種目を削除
      ///
      /// Locales: ja
      static let deleteEvent = Rswift.StringResource(key: "deleteEvent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 種目を編集
      ///
      /// Locales: ja
      static let editViewTitle = Rswift.StringResource(key: "editViewTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 種目を追加
      ///
      /// Locales: ja
      static let addViewTitle = Rswift.StringResource(key: "addViewTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 種目名
      ///
      /// Locales: ja
      static let eventName = Rswift.StringResource(key: "eventName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 種目名を入力してください
      ///
      /// Locales: ja
      static let eventNamePlaceholder = Rswift.StringResource(key: "eventNamePlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 種目数：5個 → 無制限
      ///
      /// Locales: ja
      static let unlockEvents = Rswift.StringResource(key: "unlockEvents", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 筋トレ記録
      ///
      /// Locales: ja
      static let homeViewTitle = Rswift.StringResource(key: "homeViewTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 記録
      ///
      /// Locales: ja
      static let record = Rswift.StringResource(key: "record", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 記録をすると結果がグラフに表れます
      ///
      /// Locales: ja
      static let tutorialTextThree = Rswift.StringResource(key: "tutorialTextThree", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 記録を上書き
      ///
      /// Locales: ja
      static let updateRecord = Rswift.StringResource(key: "updateRecord", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 記録を続けて成長をデータ化しましょう！
      ///
      /// Locales: ja
      static let tutorialTextFour = Rswift.StringResource(key: "tutorialTextFour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 設定
      ///
      /// Locales: ja
      static let settingViewTitle = Rswift.StringResource(key: "settingViewTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 購入しました
      ///
      /// Locales: ja
      static let purchased = Rswift.StringResource(key: "purchased", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 購入を復元しました
      ///
      /// Locales: ja
      static let restored = Rswift.StringResource(key: "restored", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 追加
      ///
      /// Locales: ja
      static let add = Rswift.StringResource(key: "add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 過去の購入を復元
      ///
      /// Locales: ja
      static let restore = Rswift.StringResource(key: "restore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 重量
      ///
      /// Locales: ja
      static let weightTitle = Rswift.StringResource(key: "weightTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 重量：
      ///
      /// Locales: ja
      static let weightIs = Rswift.StringResource(key: "weightIs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 閉じる
      ///
      /// Locales: ja
      static let close = Rswift.StringResource(key: "close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)

      /// ja translation:      ーーーーーーーーーーーーーーーーー この上へお気軽にご記入ください。 筋トレ記録
      ///
      /// Locales: ja
      static func messageBody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("messageBody", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "messageBody"
        }

        return NSLocalizedString("messageBody", bundle: bundle, comment: "")
      }

      /// ja translation: 1日毎
      ///
      /// Locales: ja
      static func everyday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("everyday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "everyday"
        }

        return NSLocalizedString("everyday", bundle: bundle, comment: "")
      }

      /// ja translation: 27日平均
      ///
      /// Locales: ja
      static func twentySevenDaysAverage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("twentySevenDaysAverage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "twentySevenDaysAverage"
        }

        return NSLocalizedString("twentySevenDaysAverage", bundle: bundle, comment: "")
      }

      /// ja translation: 3日平均
      ///
      /// Locales: ja
      static func threeDaysAverage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("threeDaysAverage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "threeDaysAverage"
        }

        return NSLocalizedString("threeDaysAverage", bundle: bundle, comment: "")
      }

      /// ja translation: 9日平均
      ///
      /// Locales: ja
      static func nineDaysAverage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nineDaysAverage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nineDaysAverage"
        }

        return NSLocalizedString("nineDaysAverage", bundle: bundle, comment: "")
      }

      /// ja translation: AppIcon
      ///
      /// Locales: ja
      static func appIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appIcon"
        }

        return NSLocalizedString("appIcon", bundle: bundle, comment: "")
      }

      /// ja translation: Icon
      ///
      /// Locales: ja
      static func icon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("icon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "icon"
        }

        return NSLocalizedString("icon", bundle: bundle, comment: "")
      }

      /// ja translation: Icons
      ///
      /// Locales: ja
      static func icons(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("icons", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "icons"
        }

        return NSLocalizedString("icons", bundle: bundle, comment: "")
      }

      /// ja translation: Items
      ///
      /// Locales: ja
      static func items(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("items", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "items"
        }

        return NSLocalizedString("items", bundle: bundle, comment: "")
      }

      /// ja translation: Logo
      ///
      /// Locales: ja
      static func logo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logo"
        }

        return NSLocalizedString("logo", bundle: bundle, comment: "")
      }

      /// ja translation: OK
      ///
      /// Locales: ja
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", bundle: bundle, comment: "")
      }

      /// ja translation: Proにをアンロックすれば、無制限に追加することができます。
      ///
      /// Locales: ja
      static func eventsWillBeUnlimitedIfJoinPro(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eventsWillBeUnlimitedIfJoinPro", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eventsWillBeUnlimitedIfJoinPro"
        }

        return NSLocalizedString("eventsWillBeUnlimitedIfJoinPro", bundle: bundle, comment: "")
      }

      /// ja translation: Proをアンロック
      ///
      /// Locales: ja
      static func proViewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("proViewTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "proViewTitle"
        }

        return NSLocalizedString("proViewTitle", bundle: bundle, comment: "")
      }

      /// ja translation: Proをアンロック - 250円
      ///
      /// Locales: ja
      static func purchase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("purchase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "purchase"
        }

        return NSLocalizedString("purchase", bundle: bundle, comment: "")
      }

      /// ja translation: Proを見る
      ///
      /// Locales: ja
      static func seePro(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seePro", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seePro"
        }

        return NSLocalizedString("seePro", bundle: bundle, comment: "")
      }

      /// ja translation: Proアンロック済み
      ///
      /// Locales: ja
      static func unlockedPro(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unlockedPro", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unlockedPro"
        }

        return NSLocalizedString("unlockedPro", bundle: bundle, comment: "")
      }

      /// ja translation: PurchaseStatus
      ///
      /// Locales: ja
      static func purchaseStatus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("purchaseStatus", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "purchaseStatus"
        }

        return NSLocalizedString("purchaseStatus", bundle: bundle, comment: "")
      }

      /// ja translation: ThemeColor
      ///
      /// Locales: ja
      static func themeColor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("themeColor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "themeColor"
        }

        return NSLocalizedString("themeColor", bundle: bundle, comment: "")
      }

      /// ja translation: Themes
      ///
      /// Locales: ja
      static func themes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("themes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "themes"
        }

        return NSLocalizedString("themes", bundle: bundle, comment: "")
      }

      /// ja translation: Tutorial1
      ///
      /// Locales: ja
      static func tutorial1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial1"
        }

        return NSLocalizedString("tutorial1", bundle: bundle, comment: "")
      }

      /// ja translation: Tutorial2
      ///
      /// Locales: ja
      static func tutorial2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial2"
        }

        return NSLocalizedString("tutorial2", bundle: bundle, comment: "")
      }

      /// ja translation: Tutorial3
      ///
      /// Locales: ja
      static func tutorial3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial3"
        }

        return NSLocalizedString("tutorial3", bundle: bundle, comment: "")
      }

      /// ja translation: Tutorial4
      ///
      /// Locales: ja
      static func tutorial4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial4"
        }

        return NSLocalizedString("tutorial4", bundle: bundle, comment: "")
      }

      /// ja translation: Tutorial5
      ///
      /// Locales: ja
      static func tutorial5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorial5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorial5"
        }

        return NSLocalizedString("tutorial5", bundle: bundle, comment: "")
      }

      /// ja translation: arrow.backward
      ///
      /// Locales: ja
      static func backIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backIcon"
        }

        return NSLocalizedString("backIcon", bundle: bundle, comment: "")
      }

      /// ja translation: arrow.down.circle.fill
      ///
      /// Locales: ja
      static func arrowIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("arrowIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "arrowIcon"
        }

        return NSLocalizedString("arrowIcon", bundle: bundle, comment: "")
      }

      /// ja translation: date
      ///
      /// Locales: ja
      static func date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "date"
        }

        return NSLocalizedString("date", bundle: bundle, comment: "")
      }

      /// ja translation: ellipsis.circle
      ///
      /// Locales: ja
      static func editIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editIcon"
        }

        return NSLocalizedString("editIcon", bundle: bundle, comment: "")
      }

      /// ja translation: email
      ///
      /// Locales: ja
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email"
        }

        return NSLocalizedString("email", bundle: bundle, comment: "")
      }

      /// ja translation: envelope
      ///
      /// Locales: ja
      static func envelopeIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("envelopeIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "envelopeIcon"
        }

        return NSLocalizedString("envelopeIcon", bundle: bundle, comment: "")
      }

      /// ja translation: events
      ///
      /// Locales: ja
      static func events(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("events", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "events"
        }

        return NSLocalizedString("events", bundle: bundle, comment: "")
      }

      /// ja translation: example@example.com
      ///
      /// Locales: ja
      static func emailAddressPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailAddressPlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emailAddressPlaceholder"
        }

        return NSLocalizedString("emailAddressPlaceholder", bundle: bundle, comment: "")
      }

      /// ja translation: gift
      ///
      /// Locales: ja
      static func giftIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("giftIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "giftIcon"
        }

        return NSLocalizedString("giftIcon", bundle: bundle, comment: "")
      }

      /// ja translation: hammer.circle.fill
      ///
      /// Locales: ja
      static func hammerIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hammerIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hammerIcon"
        }

        return NSLocalizedString("hammerIcon", bundle: bundle, comment: "")
      }

      /// ja translation: https://itunes.apple.com/jp/app/id1628829703?mt=8
      ///
      /// Locales: ja
      static func appURL(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appURL", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appURL"
        }

        return NSLocalizedString("appURL", bundle: bundle, comment: "")
      }

      /// ja translation: kg 
      ///
      /// Locales: ja
      static func kg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "kg"
        }

        return NSLocalizedString("kg", bundle: bundle, comment: "")
      }

      /// ja translation: latestDate
      ///
      /// Locales: ja
      static func latestDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("latestDate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "latestDate"
        }

        return NSLocalizedString("latestDate", bundle: bundle, comment: "")
      }

      /// ja translation: latestRep
      ///
      /// Locales: ja
      static func latestRep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("latestRep", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "latestRep"
        }

        return NSLocalizedString("latestRep", bundle: bundle, comment: "")
      }

      /// ja translation: latestWeight
      ///
      /// Locales: ja
      static func latestWeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("latestWeight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "latestWeight"
        }

        return NSLocalizedString("latestWeight", bundle: bundle, comment: "")
      }

      /// ja translation: launchedTimes
      ///
      /// Locales: ja
      static func launchedTimes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("launchedTimes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "launchedTimes"
        }

        return NSLocalizedString("launchedTimes", bundle: bundle, comment: "")
      }

      /// ja translation: line.3.horizontal
      ///
      /// Locales: ja
      static func settingIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settingIcon"
        }

        return NSLocalizedString("settingIcon", bundle: bundle, comment: "")
      }

      /// ja translation: lock.circle.fill
      ///
      /// Locales: ja
      static func lockIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lockIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lockIcon"
        }

        return NSLocalizedString("lockIcon", bundle: bundle, comment: "")
      }

      /// ja translation: musclerecord.pro
      ///
      /// Locales: ja
      static func proIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("proIdentifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "proIdentifier"
        }

        return NSLocalizedString("proIdentifier", bundle: bundle, comment: "")
      }

      /// ja translation: name
      ///
      /// Locales: ja
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "name"
        }

        return NSLocalizedString("name", bundle: bundle, comment: "")
      }

      /// ja translation: paintbrush.pointed.fill
      ///
      /// Locales: ja
      static func brushIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("brushIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "brushIcon"
        }

        return NSLocalizedString("brushIcon", bundle: bundle, comment: "")
      }

      /// ja translation: password
      ///
      /// Locales: ja
      static func passwordPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordPlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "passwordPlaceholder"
        }

        return NSLocalizedString("passwordPlaceholder", bundle: bundle, comment: "")
      }

      /// ja translation: pencil.circle
      ///
      /// Locales: ja
      static func pencilIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pencilIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pencilIcon"
        }

        return NSLocalizedString("pencilIcon", bundle: bundle, comment: "")
      }

      /// ja translation: pencil.circle.fill
      ///
      /// Locales: ja
      static func pencilIconFill(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pencilIconFill", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pencilIconFill"
        }

        return NSLocalizedString("pencilIconFill", bundle: bundle, comment: "")
      }

      /// ja translation: period
      ///
      /// Locales: ja
      static func period(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("period", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "period"
        }

        return NSLocalizedString("period", bundle: bundle, comment: "")
      }

      /// ja translation: person
      ///
      /// Locales: ja
      static func personIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("personIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "personIcon"
        }

        return NSLocalizedString("personIcon", bundle: bundle, comment: "")
      }

      /// ja translation: plus
      ///
      /// Locales: ja
      static func plusIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plusIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plusIcon"
        }

        return NSLocalizedString("plusIcon", bundle: bundle, comment: "")
      }

      /// ja translation: pro
      ///
      /// Locales: ja
      static func pro(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pro", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pro"
        }

        return NSLocalizedString("pro", bundle: bundle, comment: "")
      }

      /// ja translation: questionmark
      ///
      /// Locales: ja
      static func questionIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("questionIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "questionIcon"
        }

        return NSLocalizedString("questionIcon", bundle: bundle, comment: "")
      }

      /// ja translation: records
      ///
      /// Locales: ja
      static func records(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("records", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "records"
        }

        return NSLocalizedString("records", bundle: bundle, comment: "")
      }

      /// ja translation: rectangle.portrait.and.arrow.right
      ///
      /// Locales: ja
      static func logoutIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logoutIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logoutIcon"
        }

        return NSLocalizedString("logoutIcon", bundle: bundle, comment: "")
      }

      /// ja translation: rep
      ///
      /// Locales: ja
      static func rep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rep", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "rep"
        }

        return NSLocalizedString("rep", bundle: bundle, comment: "")
      }

      /// ja translation: square.and.arrow.up
      ///
      /// Locales: ja
      static func shareIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shareIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shareIcon"
        }

        return NSLocalizedString("shareIcon", bundle: bundle, comment: "")
      }

      /// ja translation: themeColorNumber
      ///
      /// Locales: ja
      static func themeColorNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("themeColorNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "themeColorNumber"
        }

        return NSLocalizedString("themeColorNumber", bundle: bundle, comment: "")
      }

      /// ja translation: users
      ///
      /// Locales: ja
      static func users(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("users", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "users"
        }

        return NSLocalizedString("users", bundle: bundle, comment: "")
      }

      /// ja translation: weight
      ///
      /// Locales: ja
      static func weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "weight"
        }

        return NSLocalizedString("weight", bundle: bundle, comment: "")
      }

      /// ja translation: yazujumusa@gmail.com
      ///
      /// Locales: ja
      static func messageResipients(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("messageResipients", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "messageResipients"
        }

        return NSLocalizedString("messageResipients", bundle: bundle, comment: "")
      }

      /// ja translation: ©︎ 2022 Musa Yazuju
      ///
      /// Locales: ja
      static func copyRight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("copyRight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "copyRight"
        }

        return NSLocalizedString("copyRight", bundle: bundle, comment: "")
      }

      /// ja translation: ご意見・ご要望
      ///
      /// Locales: ja
      static func messageSubject(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("messageSubject", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "messageSubject"
        }

        return NSLocalizedString("messageSubject", bundle: bundle, comment: "")
      }

      /// ja translation: まずは右上の ＋ ボタンから種目を追加しましょう
      ///
      /// Locales: ja
      static func tutorialTextOne(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorialTextOne", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorialTextOne"
        }

        return NSLocalizedString("tutorialTextOne", bundle: bundle, comment: "")
      }

      /// ja translation: を押して記録できます
      ///
      /// Locales: ja
      static func tutorialTextTwoLast(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorialTextTwoLast", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorialTextTwoLast"
        }

        return NSLocalizedString("tutorialTextTwoLast", bundle: bundle, comment: "")
      }

      /// ja translation: アイコン
      ///
      /// Locales: ja
      static func iconViewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iconViewTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "iconViewTitle"
        }

        return NSLocalizedString("iconViewTitle", bundle: bundle, comment: "")
      }

      /// ja translation: アイコン解放
      ///
      /// Locales: ja
      static func unlockIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unlockIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unlockIcon"
        }

        return NSLocalizedString("unlockIcon", bundle: bundle, comment: "")
      }

      /// ja translation: アカウントが作成されました
      ///
      /// Locales: ja
      static func accountCreated(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accountCreated", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accountCreated"
        }

        return NSLocalizedString("accountCreated", bundle: bundle, comment: "")
      }

      /// ja translation: アカウント作成
      ///
      /// Locales: ja
      static func createAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("createAccount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "createAccount"
        }

        return NSLocalizedString("createAccount", bundle: bundle, comment: "")
      }

      /// ja translation: アカウント情報を変更するには一度ログインする必要があります。
      ///
      /// Locales: ja
      static func needLoginToChangeAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("needLoginToChangeAccount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "needLoginToChangeAccount"
        }

        return NSLocalizedString("needLoginToChangeAccount", bundle: bundle, comment: "")
      }

      /// ja translation: アカウント情報変更
      ///
      /// Locales: ja
      static func changeInfoViewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changeInfoViewTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changeInfoViewTitle"
        }

        return NSLocalizedString("changeInfoViewTitle", bundle: bundle, comment: "")
      }

      /// ja translation: アプリをシェア
      ///
      /// Locales: ja
      static func shareApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shareApp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shareApp"
        }

        return NSLocalizedString("shareApp", bundle: bundle, comment: "")
      }

      /// ja translation: アプリケーション
      ///
      /// Locales: ja
      static func application(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("application", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "application"
        }

        return NSLocalizedString("application", bundle: bundle, comment: "")
      }

      /// ja translation: エラーが発生しました
      ///
      /// Locales: ja
      static func errorOccured(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorOccured", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorOccured"
        }

        return NSLocalizedString("errorOccured", bundle: bundle, comment: "")
      }

      /// ja translation: グラフを見る ▶︎
      ///
      /// Locales: ja
      static func seeGraph(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeGraph", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeGraph"
        }

        return NSLocalizedString("seeGraph", bundle: bundle, comment: "")
      }

      /// ja translation: テーマカラー
      ///
      /// Locales: ja
      static func themeColorViewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("themeColorViewTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "themeColorViewTitle"
        }

        return NSLocalizedString("themeColorViewTitle", bundle: bundle, comment: "")
      }

      /// ja translation: テーマカラー解放
      ///
      /// Locales: ja
      static func unlockTheme(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unlockTheme", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unlockTheme"
        }

        return NSLocalizedString("unlockTheme", bundle: bundle, comment: "")
      }

      /// ja translation: トレーニング後は
      ///
      /// Locales: ja
      static func tutorialTextTwoFirst(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorialTextTwoFirst", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorialTextTwoFirst"
        }

        return NSLocalizedString("tutorialTextTwoFirst", bundle: bundle, comment: "")
      }

      /// ja translation: パスワード
      ///
      /// Locales: ja
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password"
        }

        return NSLocalizedString("password", bundle: bundle, comment: "")
      }

      /// ja translation: パスワードが入力されていません
      ///
      /// Locales: ja
      static func passwordIsEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordIsEmpty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "passwordIsEmpty"
        }

        return NSLocalizedString("passwordIsEmpty", bundle: bundle, comment: "")
      }

      /// ja translation: パスワードが更新されました
      ///
      /// Locales: ja
      static func passwordUpdated(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordUpdated", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "passwordUpdated"
        }

        return NSLocalizedString("passwordUpdated", bundle: bundle, comment: "")
      }

      /// ja translation: パスワードと確認パスワードが一致しません
      ///
      /// Locales: ja
      static func passwordAndPasswordConfirmIsNotEqual(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordAndPasswordConfirmIsNotEqual", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "passwordAndPasswordConfirmIsNotEqual"
        }

        return NSLocalizedString("passwordAndPasswordConfirmIsNotEqual", bundle: bundle, comment: "")
      }

      /// ja translation: パスワードを再設定
      ///
      /// Locales: ja
      static func resetPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resetPassword", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resetPassword"
        }

        return NSLocalizedString("resetPassword", bundle: bundle, comment: "")
      }

      /// ja translation: パスワードを変更
      ///
      /// Locales: ja
      static func changePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changePassword", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changePassword"
        }

        return NSLocalizedString("changePassword", bundle: bundle, comment: "")
      }

      /// ja translation: パスワードを忘れた
      ///
      /// Locales: ja
      static func forgotPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forgotPassword", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forgotPassword"
        }

        return NSLocalizedString("forgotPassword", bundle: bundle, comment: "")
      }

      /// ja translation: メールを送信しました
      ///
      /// Locales: ja
      static func sendEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendEmail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendEmail"
        }

        return NSLocalizedString("sendEmail", bundle: bundle, comment: "")
      }

      /// ja translation: メールアドレス
      ///
      /// Locales: ja
      static func emailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailAddress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emailAddress"
        }

        return NSLocalizedString("emailAddress", bundle: bundle, comment: "")
      }

      /// ja translation: メールアドレスが入力されていません
      ///
      /// Locales: ja
      static func emailIsEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailIsEmpty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emailIsEmpty"
        }

        return NSLocalizedString("emailIsEmpty", bundle: bundle, comment: "")
      }

      /// ja translation: メールアドレスが更新されました
      ///
      /// Locales: ja
      static func updatedEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("updatedEmail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "updatedEmail"
        }

        return NSLocalizedString("updatedEmail", bundle: bundle, comment: "")
      }

      /// ja translation: メールアドレスを変更
      ///
      /// Locales: ja
      static func changeEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changeEmail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changeEmail"
        }

        return NSLocalizedString("changeEmail", bundle: bundle, comment: "")
      }

      /// ja translation: ログアウト
      ///
      /// Locales: ja
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logout"
        }

        return NSLocalizedString("logout", bundle: bundle, comment: "")
      }

      /// ja translation: ログイン
      ///
      /// Locales: ja
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login"
        }

        return NSLocalizedString("login", bundle: bundle, comment: "")
      }

      /// ja translation: ログインに成功しました
      ///
      /// Locales: ja
      static func loginSucceeded(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("loginSucceeded", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "loginSucceeded"
        }

        return NSLocalizedString("loginSucceeded", bundle: bundle, comment: "")
      }

      /// ja translation: 使い方
      ///
      /// Locales: ja
      static func usage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("usage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "usage"
        }

        return NSLocalizedString("usage", bundle: bundle, comment: "")
      }

      /// ja translation: 全てのアイテムがアンロックされました。
      ///
      /// Locales: ja
      static func unlockedAllFeatures(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unlockedAllFeatures", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unlockedAllFeatures"
        }

        return NSLocalizedString("unlockedAllFeatures", bundle: bundle, comment: "")
      }

      /// ja translation: 削除
      ///
      /// Locales: ja
      static func delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete"
        }

        return NSLocalizedString("delete", bundle: bundle, comment: "")
      }

      /// ja translation: 受け取ったメールを開いてパスワードを再設定してください。
      ///
      /// Locales: ja
      static func pleaseCheckEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pleaseCheckEmail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pleaseCheckEmail"
        }

        return NSLocalizedString("pleaseCheckEmail", bundle: bundle, comment: "")
      }

      /// ja translation: 名前を上書き
      ///
      /// Locales: ja
      static func updateName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("updateName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "updateName"
        }

        return NSLocalizedString("updateName", bundle: bundle, comment: "")
      }

      /// ja translation: 回数
      ///
      /// Locales: ja
      static func repTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("repTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "repTitle"
        }

        return NSLocalizedString("repTitle", bundle: bundle, comment: "")
      }

      /// ja translation: 回数：
      ///
      /// Locales: ja
      static func repIs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("repIs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "repIs"
        }

        return NSLocalizedString("repIs", bundle: bundle, comment: "")
      }

      /// ja translation: 始める
      ///
      /// Locales: ja
      static func start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "start"
        }

        return NSLocalizedString("start", bundle: bundle, comment: "")
      }

      /// ja translation: 新しいパスワード
      ///
      /// Locales: ja
      static func newPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newPassword", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newPassword"
        }

        return NSLocalizedString("newPassword", bundle: bundle, comment: "")
      }

      /// ja translation: 新しいメールアドレス
      ///
      /// Locales: ja
      static func newEmailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newEmailAddress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newEmailAddress"
        }

        return NSLocalizedString("newEmailAddress", bundle: bundle, comment: "")
      }

      /// ja translation: 既存のアカウントにログイン
      ///
      /// Locales: ja
      static func loginExistingAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("loginExistingAccount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "loginExistingAccount"
        }

        return NSLocalizedString("loginExistingAccount", bundle: bundle, comment: "")
      }

      /// ja translation: 本当にログアウトしますか？
      ///
      /// Locales: ja
      static func logoutConfirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logoutConfirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logoutConfirm"
        }

        return NSLocalizedString("logoutConfirm", bundle: bundle, comment: "")
      }

      /// ja translation: 本当に削除しますか？
      ///
      /// Locales: ja
      static func checkDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("checkDelete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "checkDelete"
        }

        return NSLocalizedString("checkDelete", bundle: bundle, comment: "")
      }

      /// ja translation: 無料版で追加できる種目は5個です
      ///
      /// Locales: ja
      static func onlyFiveEventsAvailableInFree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onlyFiveEventsAvailableInFree", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onlyFiveEventsAvailableInFree"
        }

        return NSLocalizedString("onlyFiveEventsAvailableInFree", bundle: bundle, comment: "")
      }

      /// ja translation: 確認用パスワード
      ///
      /// Locales: ja
      static func passwordConfirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordConfirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "passwordConfirm"
        }

        return NSLocalizedString("passwordConfirm", bundle: bundle, comment: "")
      }

      /// ja translation: 確認用パスワードが入力されていません
      ///
      /// Locales: ja
      static func passwordConfirmIsEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordConfirmIsEmpty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "passwordConfirmIsEmpty"
        }

        return NSLocalizedString("passwordConfirmIsEmpty", bundle: bundle, comment: "")
      }

      /// ja translation: 種目を削除
      ///
      /// Locales: ja
      static func deleteEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deleteEvent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deleteEvent"
        }

        return NSLocalizedString("deleteEvent", bundle: bundle, comment: "")
      }

      /// ja translation: 種目を編集
      ///
      /// Locales: ja
      static func editViewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editViewTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editViewTitle"
        }

        return NSLocalizedString("editViewTitle", bundle: bundle, comment: "")
      }

      /// ja translation: 種目を追加
      ///
      /// Locales: ja
      static func addViewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addViewTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addViewTitle"
        }

        return NSLocalizedString("addViewTitle", bundle: bundle, comment: "")
      }

      /// ja translation: 種目名
      ///
      /// Locales: ja
      static func eventName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eventName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eventName"
        }

        return NSLocalizedString("eventName", bundle: bundle, comment: "")
      }

      /// ja translation: 種目名を入力してください
      ///
      /// Locales: ja
      static func eventNamePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eventNamePlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eventNamePlaceholder"
        }

        return NSLocalizedString("eventNamePlaceholder", bundle: bundle, comment: "")
      }

      /// ja translation: 種目数：5個 → 無制限
      ///
      /// Locales: ja
      static func unlockEvents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unlockEvents", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unlockEvents"
        }

        return NSLocalizedString("unlockEvents", bundle: bundle, comment: "")
      }

      /// ja translation: 筋トレ記録
      ///
      /// Locales: ja
      static func homeViewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("homeViewTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "homeViewTitle"
        }

        return NSLocalizedString("homeViewTitle", bundle: bundle, comment: "")
      }

      /// ja translation: 記録
      ///
      /// Locales: ja
      static func record(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("record", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "record"
        }

        return NSLocalizedString("record", bundle: bundle, comment: "")
      }

      /// ja translation: 記録をすると結果がグラフに表れます
      ///
      /// Locales: ja
      static func tutorialTextThree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorialTextThree", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorialTextThree"
        }

        return NSLocalizedString("tutorialTextThree", bundle: bundle, comment: "")
      }

      /// ja translation: 記録を上書き
      ///
      /// Locales: ja
      static func updateRecord(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("updateRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "updateRecord"
        }

        return NSLocalizedString("updateRecord", bundle: bundle, comment: "")
      }

      /// ja translation: 記録を続けて成長をデータ化しましょう！
      ///
      /// Locales: ja
      static func tutorialTextFour(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tutorialTextFour", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tutorialTextFour"
        }

        return NSLocalizedString("tutorialTextFour", bundle: bundle, comment: "")
      }

      /// ja translation: 設定
      ///
      /// Locales: ja
      static func settingViewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingViewTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settingViewTitle"
        }

        return NSLocalizedString("settingViewTitle", bundle: bundle, comment: "")
      }

      /// ja translation: 購入しました
      ///
      /// Locales: ja
      static func purchased(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("purchased", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "purchased"
        }

        return NSLocalizedString("purchased", bundle: bundle, comment: "")
      }

      /// ja translation: 購入を復元しました
      ///
      /// Locales: ja
      static func restored(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("restored", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "restored"
        }

        return NSLocalizedString("restored", bundle: bundle, comment: "")
      }

      /// ja translation: 追加
      ///
      /// Locales: ja
      static func add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add"
        }

        return NSLocalizedString("add", bundle: bundle, comment: "")
      }

      /// ja translation: 過去の購入を復元
      ///
      /// Locales: ja
      static func restore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("restore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "restore"
        }

        return NSLocalizedString("restore", bundle: bundle, comment: "")
      }

      /// ja translation: 重量
      ///
      /// Locales: ja
      static func weightTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weightTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "weightTitle"
        }

        return NSLocalizedString("weightTitle", bundle: bundle, comment: "")
      }

      /// ja translation: 重量：
      ///
      /// Locales: ja
      static func weightIs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weightIs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "weightIs"
        }

        return NSLocalizedString("weightIs", bundle: bundle, comment: "")
      }

      /// ja translation: 閉じる
      ///
      /// Locales: ja
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "close"
        }

        return NSLocalizedString("close", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
